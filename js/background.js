/**
 * class {taskList} - creates object of all the tasks in chrome's storage
 */
class taskList {
	/*------------------------------------------------------------------------*//**
	 * Constructs the object.
	 *
	 * @param      {string}  items   object of all tasks in chrome's memory
	 */
	constructor(items) {
		this.tasksArr = [];
		this.upcomingTasksArr = [];
		this.pendingTasksArr = [];
		this.completedTasksArr = [];
		/**
		 * looping over every task object and adding a timestamp attribute to
		 * each of them generated by the date and time values present in them.
		 * Also adding the 'id' attribute by which it is stored in chrome's
		 * storage. Finally pushing each task object into an array.
		 */
		for(let item in items) {
			let year,month,day,hours,minutes;
			items[item]['timestamp'] = new Date(items[item]['date'] + " " + items[item]['time']).getTime();
			items[item]['id'] = item; 
			this.tasksArr.push(items[item]);
		}
	}
	/*------------------------------------------------------------------------*//**
	 * Updates the array containing all the tasks. Called when chrome fires an
	 * change event to its storage, i.e. a task has been added, deleted or
	 * modified.
	 *
	 * @param      {string}  items   object of all tasks in chrome's storage
	 */
	updateTasksArr(items) {
		this.tasksArr = [];
		/**
		 * looping over every task object and adding a timestamp attribute to
		 * each of them generated by the date and time values present in them.
		 * Also adding the 'id' attribute by which it is stored in chrome's
		 * storage. Finally pushing each task object into an array.
		 */
		for(let item in items) {
			let year,month,day,hours,minutes;
			items[item]['timestamp'] = new Date(items[item]['date'] + " " + items[item]['time']).getTime();
			items[item]['id'] = item; 
			this.tasksArr.push(items[item]);
		}
	}
	/*------------------------------------------------------------------------*//**
	 * Gets all tasks, i.e. the all tasks array
	 *
	 * @return     {array}  All tasks.
	 */
	getAllTasks() {
		return this.tasksArr;
	}
	/**
	 * Gets the total number of tasks.
	 *
	 * @return     {array}  Total number of tasks
	 */
	getAllTasksNumber() {
		return this.tasksArr.length;
	}
	/*------------------------------------------------------------------------*//**
	 * Gets the upcoming tasks.
	 *
	 * @return     {array}  The upcoming tasks.
	 */
	getUpcomingTasks(){
		this.upcomingTasksArr = [];
		let currentTimeStamp = Date.now();
		for (var i = 0; i < this.tasksArr.length; i++) {
			if((currentTimeStamp <= this.tasksArr[i]['timestamp'] || isNaN(this.tasksArr[i]['timestamp'])) && this.tasksArr[i].done == 0) {
				this.upcomingTasksArr.push(this.tasksArr[i]);
			}
		}
		return this.upcomingTasksArr;
	}
	/*------------------------------------------------------------------------*//**
	 * Gets the total number upcoming tasks.
	 *
	 * @return     {array}  The number of upcoming tasks.
	 */
	getUpcomingTasksNumber(){
		this.getUpcomingTasks();
		return this.upcomingTasksArr.length;
	}
	/*------------------------------------------------------------------------*//**
	 * Gets the completed tasks.
	 *
	 * @return     {array}  The completed tasks.
	 */
	getCompletedTasks(){
		this.completedTasksArr = [];
		for (var i = 0; i < this.tasksArr.length; i++) {
			if(this.tasksArr[i].done == 1) {
				this.completedTasksArr.push(this.tasksArr[i]);
			}
		}
		return this.completedTasksArr;
	}
	/*------------------------------------------------------------------------*//**
	 * Gets the total number of completed tasks.
	 *
	 * @return     {array}  The number of completed tasks.
	 */
	getCompletedTasksNumber(){
		this.getCompletedTasks();
		return this.completedTasksArr.length;
	}
	/*------------------------------------------------------------------------*//**
	 * Gets the pending tasks.
	 *
	 * @return     {array}  The pending tasks.
	 */
	getPendingTasks(){
		this.pendingTasksArr = [];
		let currentTimeStamp = Date.now();
		for (var i = 0; i < this.tasksArr.length; i++) {
			if(currentTimeStamp >= this.tasksArr[i]['timestamp'] && this.tasksArr[i].done == 0) {
				this.pendingTasksArr.push(this.tasksArr[i]);
			}
		}
		return this.pendingTasksArr;
	}
	/*------------------------------------------------------------------------*//**
	 * Gets the number of pending tasks.
	 *
	 * @return     {array}  The total number of pending tasks.
	 */
	getPendingTasksNumber(){
		this.getPendingTasks();
		return this.pendingTasksArr.length;
	}
	/*------------------------------------------------------------------------*//**
	 * Returns the HTML of a single upcoming task
	 *
	 * @param      {string}  id           Task id as stored in chrome storage
	 * @param      {string}  title        The title of the task
	 * @param      {string}  description  The description of the task
	 * @param      {string}  date         The date of the task
	 * @param      {string}  time         The time of the task
	 * @param      {number}  done         Whether the task is marked as finished
	 *                                    or not
	 * @return     {string}  The HTML of a single upcoming task.
	 */
	getSingleTemplateUpcoming(id,title,description,date,time,done){
		date = date != ''?'('+date+')':'';
		return `
			<div class="col-xs-12 col-sm-6 col-md-4 col-lg-4">
				<div class="panel panel-primary">
				  <div class="panel-heading">${title}</div>
				  <div class="panel-body">${description}</div>
				  <div class="panel-footer">
				  	 ${time}
				  	 ${date}
				  	<button class="btn btn-info editBtn" data-id="${id}">Edit</button>
				  	<button class="btn btn-warning deleteBtn" data-id="${id}">Delete</button>
				  	<button class="btn btn-success doneBtn" data-id="${id}">${done==0?'Done':'Not done'}</button>
				  </div>
				</div>
			</div>
		`;
	}
	/*------------------------------------------------------------------------*//**	
	 * Returns the HTML of a single pending task
	 *
	 * @param      {string}  id           Task id as stored in chrome storage
	 * @param      {string}  title        The title of the task
	 * @param      {string}  description  The description of the task
	 * @param      {string}  date         The date of the task
	 * @param      {string}  time         The time of the task
	 * @param      {number}  done         Whether the task is marked as finished
	 *                                    or not
	 * @return     {string}  The HTML of a single pending task.
	 */
	getSingleTemplatePending(id,title,description,date,time,done){
		date = date != ''?'('+date+')':'';
		return `
			<div class="col-xs-12 col-sm-6 col-md-4 col-lg-4">
				<div class="panel panel-danger">
				  <div class="panel-heading">${title}</div>
				  <div class="panel-body">${description}</div>
				  <div class="panel-footer">
				  	 ${time}
				  	 ${date}
				  	<button class="btn btn-info editBtn" data-id="${id}">Edit</button>
				  	<button class="btn btn-warning deleteBtn" data-id="${id}">Delete</button>
				  	<button class="btn btn-success doneBtn" data-id="${id}">${done==0?'Done':'Not done'}</button>
				  </div>
				</div>
			</div>
		`;
	}
	/*------------------------------------------------------------------------*//**
	 * Returns the HTML of a single completed task
	 *
	 * @param      {string}  id           Task id as stored in chrome storage
	 * @param      {string}  title        The title of the task
	 * @param      {string}  description  The description of the task
	 * @param      {string}  date         The date of the task
	 * @param      {string}  time         The time of the task
	 * @param      {number}  done         Whether the task is marked as finished
	 *                                    or not
	 * @return     {string}  The HTML of a single completed task.
	 */
	getSingleTemplateCompleted(id,title,description,date,time,done){
		date = date != ''?'('+date+')':'';
		return `
			<div class="col-xs-12 col-sm-6 col-md-4 col-lg-4">
				<div class="panel panel-success">
				  <div class="panel-heading">${title}</div>
				  <div class="panel-body">${description}</div>
				  <div class="panel-footer">
				  	 ${time}
				  	 ${date}
				  	<button class="btn btn-info editBtn" data-id="${id}">Edit</button>
				  	<button class="btn btn-warning deleteBtn" data-id="${id}">Delete</button>
				  	<button class="btn btn-success doneBtn" data-id="${id}">${done==0?'Done':'Not done'}</button>
				  </div>
				</div>
			</div>
		`;
	}
	/*------------------------------------------------------------------------*//**
	 * Returns the HTML of all upcoming tasks
	 *
	 * @return     {string}  The HTML of all upcoming tasks.
	 */
	getTemplateStringUpcoming() {
		let returnString = "";
		for (var i = 0; i < this.getUpcomingTasksNumber(); i++) {
			returnString += this.getSingleTemplateUpcoming(
									this.upcomingTasksArr[i]['id'],
									this.upcomingTasksArr[i]['title'],
									this.upcomingTasksArr[i]['description'],
									this.upcomingTasksArr[i]['date'],
									this.upcomingTasksArr[i]['time'],
									this.upcomingTasksArr[i]['done']
									);
		}
		return returnString;
	}
	/*------------------------------------------------------------------------*//**
	 * Returns the HTML of all pending tasks
	 *
	 * @return     {string}  The HTML of all pending tasks.
	 */
	getTemplateStringPending() {
		let returnString = "";
		for (var i = 0; i < this.getPendingTasksNumber(); i++) {
			returnString += this.getSingleTemplatePending(
										this.pendingTasksArr[i]['id'],
										this.pendingTasksArr[i]['title'],
										this.pendingTasksArr[i]['description'],
										this.pendingTasksArr[i]['date'],
										this.pendingTasksArr[i]['time'],
										this.pendingTasksArr[i]['done']
									);
		}
		return returnString;
	}
	/*------------------------------------------------------------------------*//**
	 * Returns the HTML of all completed tasks
	 *
	 * @return     {string}  The HTML of all completed tasks.
	 */
	getTemplateStringCompleted() {
		let returnString = "";
		for (var i = 0; i < this.getCompletedTasksNumber(); i++) {
			returnString += this.getSingleTemplateCompleted(
										this.completedTasksArr[i]['id'],
										this.completedTasksArr[i]['title'],
										this.completedTasksArr[i]['description'],
										this.completedTasksArr[i]['date'],
										this.completedTasksArr[i]['time'],
										this.completedTasksArr[i]['done']
									);
		}
		return returnString;
	}
	/*------------------------------------------------------------------------*//**
	 * Returns the HTML of all tasks
	 *
	 * @return     {string}  The HTML of all tasks.
	 */
	getTemplateStringAll() {
		let returnString = "";
		returnString += this.getTemplateStringUpcoming();
		returnString += this.getTemplateStringPending();
		returnString += this.getTemplateStringCompleted();
		return returnString;
	}
	/*------------------------------------------------------------------------*//**
	 * Returns the updated HTML of the entire page. Called when a user clicks 
	 * on a menu in the navigation.
	 *
	 * @return     {string}  The complete HTML for the current view (upcoming
	 * tasks / pending tasks / completed tasks / all tasks)
	 * 
	 */
	updateView(){
		let hash = location.hash;
		let tempString;
		switch(hash) {
			case '#upComingTasks':
				tempString = this.getTemplateStringUpcoming();
				break;
			case '#pendingTasks':
				tempString = this.getTemplateStringPending();
				break;
			case '#completedTasks':
				tempString = this.getTemplateStringCompleted();
				break;
			default:
				tempString = this.getTemplateStringAll();
		}		
		return tempString;
	}
}
/**
 * Generates a chrome list notifiation showing a list of the notifications
 * that were missed when chrome was not running. 
 * 
 */
function showMissedNotifications() {
	let taskArray = this.taskView.getAllTasks();
	let time = new Date();
	time = Math.ceil(time.getTime()/1000);
	let items = [];
	let tmpObj = {};
	for (var i = 0; i < taskArray.length; i++) {
		// Checking if the timestamp on the task is older than the current
		// timestamp and whether the relevant flag (notifucation_shown) 
		// on each task item, that keeps a track of whether a notification was
		//  genetrated for that task, is 0 or not.
		if(Math.ceil(taskArray[i]['timestamp']/1000) < time && taskArray[i]['notification_shown'] == 0 && taskArray[i]['done'] == 0){
			// Notification to be shown only if the reminderType is not 4 which
			// denotes that the user has turned notifications off for this task
			if(taskArray[i]['reminderType'] == 1 || taskArray[i]['reminderType'] == 2 || taskArray[i]['reminderType'] == 3){
				
				items.push({ title: taskArray[i]['title'], message: taskArray[i]['description']});
				let tmpId = taskArray[i]['id'];
				tmpObj[tmpId] = {
					date:taskArray[i]['date'],
					description:taskArray[i]['description'],
					done:taskArray[i]['done'],
					reminderType:taskArray[i]['reminderType'],
					time:taskArray[i]['time'],
					timestamp:taskArray[i]['timestamp'],
					title:taskArray[i]['title'],
					notification_shown:1
				};
			}
		}
	}
	if(Object.keys(tmpObj).length > 0) {
		chrome.storage.sync.set(tmpObj, () => {});
	}
	if(items.length > 0) {
		let options = {
		  type: "list",
		  title: "Missed Notifications",
		  message: "You missed these notifications when chrome was not running.",
		  iconUrl: "../assets/icon_16x16.png",
		  items: items
		};
		// Generating the notification
		chrome.notifications.create(options, function(){});
	}
}
let taskView;
/**
 * Getting a list of all tasks in chrome's storage
 */
chrome.storage.sync.get(null, (items) => {
	this.taskView = new taskList(items);
	// Calling showMissedNotifications() to check if notifications has been 
	// missed.
	showMissedNotifications();
	/**
	 * Setting an interval after every 1 second to check the timestamp on any
	 * task matches the current time and produces a notification if it does
	 */
	setInterval(() => {
		let taskArray = this.taskView.getAllTasks();
		let time = new Date();
		time = Math.ceil(time.getTime()/1000);
		for (var i = 0; i < taskArray.length; i++) {
			let flag = 0;
			if(time == Math.ceil(taskArray[i]['timestamp']/1000) && taskArray[i]['done'] == 0){
				if(taskArray[i]['reminderType'] == 1 || taskArray[i]['reminderType'] == 3){
					let myAudio = new Audio();
					myAudio.src = "/assets/alarm.mp3";
					myAudio.play();
					flag = 1;
				}
				if(taskArray[i]['reminderType'] == 2 || taskArray[i]['reminderType'] == 3){
					let options = {
					  type: "basic",
					  title: taskArray[i]['title'],
					  message: taskArray[i]['description'],
					  iconUrl: "../assets/icon_16x16.png"
					};
					chrome.notifications.create(options, function(){});
					flag = 1;
				}
			}
				/**
				 * If flag is 1 that means that a notification has been shown
				 * and we need to update the 'notification_shown' flag on the
				 * task.
				 */
				if(flag == 1) {
					let tmpObj = {};
					let tmpId = taskArray[i]['id'];
					tmpObj[tmpId] = {
						date:taskArray[i]['date'],
						description:taskArray[i]['description'],
						done:taskArray[i]['done'],
						reminderType:taskArray[i]['reminderType'],
						time:taskArray[i]['time'],
						timestamp:taskArray[i]['timestamp'],
						title:taskArray[i]['title'],
						notification_shown:1
					};
					chrome.storage.sync.set(tmpObj, () => {});
				}
		}
	},1000);
});
/**
 * Adding an event listener to listen for a change event to any task like 
 * addition, deletion or modfication of a task. In such a case the tasks
 * in chrome's storage is loaded and the object containing all the tasks is
 * recreated with the new task list.
 */
chrome.storage.onChanged.addListener(() => {
	chrome.storage.sync.get(null, (items) => {
		this.taskView = new taskList(items);
	});
});
/**
 * Adding an event listener to listen in on click events on the chrome rich
 * notifications. Clicking on the notificaions will take the user to the 
 * tasks.html page.
 */
chrome.notifications.onClicked.addListener(() => {
	chrome.tabs.create({'url':chrome.runtime.getURL('html/tasks.html')});
});
